{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyPbG685rJSdPMdbSEleyyGb",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/itz-aniket-akm/LABS/blob/main/Aniket_module1_lab3\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "Gv9rKW3EHm0g"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "from keras.datasets import mnist\n",
        "# set randomseed\n",
        "rng = np.random.default_rng(seed=42)\n",
        "from sklearn.utils.extmath import cartesian\n",
        "from skimage.transform import rotate, AffineTransform, warp\n",
        "import math"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#loading the dataset\n",
        "(train_X, train_y), (test_X, test_y) = mnist.load_data()\n",
        "train_X = train_X/255\n",
        "test_X = test_X/255\n",
        "\n",
        "train_X = train_X[::1200,:,:].copy() # subsample. Otherwise it will take too long!\n",
        "train_y = train_y[::1200].copy() # do the same to the labels"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aviJqSHGHscM",
        "outputId": "f8cf6b9d-7ab6-4c96-dfa6-e5e313a9f6cf"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Downloading data from https://storage.googleapis.com/tensorflow/tf-keras-datasets/mnist.npz\n",
            "11490434/11490434 [==============================] - 0s 0us/step\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def NN1(traindata, trainlabel, query):\n",
        "  diff  = traindata - query  # find the difference between features. Numpy automatically takes care of the size here\n",
        "  sq = diff*diff # square the differences\n",
        "  dist = sq.sum(1) # add up the squares\n",
        "  label = trainlabel[np.argmin(dist)] # our predicted label is the label of the training data which has the least distance from the query\n",
        "  return label\n",
        "\n",
        "def NN(traindata, trainlabel, testdata):\n",
        "  # we will run nearest neighbour for each sample in the test data\n",
        "  # and collect the predicted classes in an array using list comprehension\n",
        "  traindata = traindata.reshape(-1, 28*28)\n",
        "  testdata = testdata.reshape(-1,28*28)\n",
        "  predlabel = np.array([NN1(traindata, trainlabel, i) for i in testdata])\n",
        "  return predlabel\n",
        "\n",
        "def Accuracy(gtlabel, predlabel):\n",
        "  assert len(gtlabel)==len(predlabel), \"Length of the groundtruth labels and predicted labels should be the same\"\n",
        "  correct = (gtlabel==predlabel).sum() # count the number of times the groundtruth label is equal to the predicted label.\n",
        "  return correct/len(gtlabel)"
      ],
      "metadata": {
        "id": "Y3ui3r4KHzI7"
      },
      "execution_count": 3,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "testpred = NN(train_X, train_y, test_X)\n",
        "print('Baseline accuracy without augmentation is ', Accuracy(test_y, testpred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "ktcW1MtuH9Hi",
        "outputId": "ca519f0c-6f71-49e9-b7c2-d124ec54ef9e"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Baseline accuracy without augmentation is  0.6472\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "testpred = NN(train_X, train_y, test_X)\n",
        "print('Baseline accuracy without augmentation is ', Accuracy(test_y, testpred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9083f022-9b47-419f-a507-cabaf8dd4efa",
        "id": "86wmdXWnl0c3"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Baseline accuracy without augmentation is  0.6472\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "plt.imshow(train_X[2], cmap='Blues')\n",
        "plt.show()\n",
        "plt.imshow(rotate(train_X[2],90), cmap='Blues')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 860
        },
        "id": "a9iJQKH4H_Pr",
        "outputId": "5a0d154c-810d-4a5a-c4a3-0d47716c1763"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7ec0906c7b50>"
            ]
          },
          "metadata": {},
          "execution_count": 6
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAAAaAAAAGdCAYAAABU0qcqAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAAcJElEQVR4nO3df3TU9Z3v8dfwIyNoMjHEZJISMICKFUivCGkuSlFyCOm5FJC7B/yxBywLCwZvgVq99KhI7T1RPJd69VI8e7eFco+Aclfg6N3S1WDCagOWKEvZapawaQkLCTXdzIQAAcnn/sF16kACfoeZvDPh+ThnziEz30++b7/9dp4ZZvLF55xzAgCgm/WxHgAAcG0iQAAAEwQIAGCCAAEATBAgAIAJAgQAMEGAAAAmCBAAwEQ/6wEu1tHRoWPHjik1NVU+n896HACAR845tba2Kjc3V336dP06p8cF6NixY8rLy7MeAwBwlRoaGjR48OAuH+9xAUpNTZUk1dU3KDUtzXgaAIBXreGwRuTnRZ7Pu5KwAK1du1YvvviiGhsbVVBQoFdeeUXjx4+/4rov/totNS1NaQQIAJLWld5GSciHEF5//XUtX75cK1eu1EcffaSCggKVlJToxIkTidgdACAJJSRAa9as0YIFC/TII4/o61//ul599VUNHDhQP//5zxOxOwBAEop7gM6ePauamhoVFxf/eSd9+qi4uFjV1dWXbN/e3q5wOBx1AwD0fnEP0Geffabz588rOzs76v7s7Gw1NjZesn15ebkCgUDkxifgAODaYP6LqCtWrFAoFIrcGhoarEcCAHSDuH8KLjMzU3379lVTU1PU/U1NTQoGg5ds7/f75ff74z0GAKCHi/sroJSUFI0dO1YVFRWR+zo6OlRRUaGioqJ47w4AkKQS8ntAy5cv19y5c3XXXXdp/Pjxeumll9TW1qZHHnkkEbsDACShhARo9uzZ+uMf/6hnnnlGjY2N+sY3vqGdO3de8sEEAMC1y+ecc9ZDfFk4HFYgEFBTc4grIQBAEgqHw8oeFFAodPnncfNPwQEArk0ECABgggABAEwQIACACQIEADBBgAAAJggQAMAEAQIAmCBAAAATBAgAYIIAAQBMECAAgAkCBAAwQYAAACYIEADABAECAJggQAAAEwQIAGCCAAEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCYIEAAABMECABgop/1AMCVHP3Tac9rBmcMSMAkAOKJV0AAABMECABgggABAEwQIACACQIEADBBgAAAJggQAMAEAQIAmCBAAAATBAgAYIIAAQBMECAAgAkuRooe7y/Xf+h5TdoN/pj29cZ3x3le4+/fN6Z9Adc6XgEBAEwQIACACQIEADBBgAAAJggQAMAEAQIAmCBAAAATBAgAYIIAAQBMECAAgAkCBAAwQYAAACa4GCl6vLa2c57XtLaejWlfHxxu9rzmvpFZMe0LuNbxCggAYIIAAQBMxD1Azz77rHw+X9Rt5MiR8d4NACDJJeQ9oDvuuEPvvvvun3fSj7eaAADRElKGfv36KRgMJuJbAwB6iYS8B3To0CHl5uZq2LBheuihh3TkyJEut21vb1c4HI66AQB6v7gHqLCwUBs2bNDOnTu1bt061dfX65577lFra2un25eXlysQCERueXl58R4JANAD+ZxzLpE7aGlp0dChQ7VmzRrNnz//ksfb29vV3t4e+TocDisvL09NzSGlpaUlcjQkifE/evfKG12koyO203r1nALPa/g9ICBaOBxW9qCAQqHLP48n/NMB6enpuvXWW1VXV9fp436/X36/P9FjAAB6mIT/HtDJkyd1+PBh5eTkJHpXAIAkEvcAPf7446qqqtLvf/97/frXv9bMmTPVt29fPfDAA/HeFQAgicX9r+COHj2qBx54QM3Nzbrpppt09913a8+ePbrpppvivSsAQBKLe4C2bNkS72+JXuRPJ71fJPSzE94/mv/vv6nyvEaSXhg00PMaPoQAxIZrwQEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCYIEAAABMECABgggABAEwQIACACQIEADBBgAAAJhL+D9IBX3bg30Ke18R6YVEAPRuvgAAAJggQAMAEAQIAmCBAAAATBAgAYIIAAQBMECAAgAkCBAAwQYAAACYIEADABAECAJggQAAAEwQIAGCCq2GjW73yj/XWI1zWwf1HPK853jLW85qc9Os8rwF6G14BAQBMECAAgAkCBAAwQYAAACYIEADABAECAJggQAAAEwQIAGCCAAEATBAgAIAJAgQAMEGAAAAmuBgpYlZ/os3zml1v7k7AJPFz6uAez2v+GP625zU9/WKk5z7v8Lxmxv/a63lN6oD+ntf8atM/eF4Tq6NvPeF5zfV+nla/Kl4BAQBM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zZql9vZ2lZSU6Kc//WlchgUA9B4+55yzHuLLwuGwAoGAmppDSktLsx4HAOBROBxW9qCAQqHLP49zLTgAgAkCBAAwQYAAACYIEADABAECAJggQAAAEwQIAGCCAAEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCYIEAAABMECABgggABAEwQIACACQIEADBBgAAAJggQAMAEAQIAmCBAAAATBAgAYIIAAQBMECAAgAkCBAAwQYAAACYIEADABAECAJggQAAAEwQIAGCCAAEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCYIEAAABMECABgggABAEwQIACACQIEADBBgAAAJggQAMAEAQIAmCBAAAATBAgAYIIAAQBMECAAgAkCBAAwQYAAACYIEADABAECAJggQAAAEwQIAGDCU4DKy8s1btw4paamKisrSzNmzFBtbW3UNpMmTZLP54u6LVq0KK5DAwCSn6cAVVVVqaysTHv27NE777yjc+fOacqUKWpra4vabsGCBTp+/Hjktnr16rgODQBIfv28bLxz586orzds2KCsrCzV1NRo4sSJkfsHDhyoYDAYnwkBAL3SVb0HFAqFJEkZGRlR97/22mvKzMzUqFGjtGLFCp06darL79He3q5wOBx1AwD0fp5eAX1ZR0eHli5dqgkTJmjUqFGR+x988EENHTpUubm5OnDggJ588knV1tbqzTff7PT7lJeXa9WqVbGOAQBIUj7nnItl4eLFi/XLX/5S77//vgYPHtzldrt27dLkyZNVV1en4cOHX/J4e3u72tvbI1+Hw2Hl5eWpqTmktLS0WEYDABgKh8PKHhRQKHT55/GYXgEtWbJEb7/9tnbv3n3Z+EhSYWGhJHUZIL/fL7/fH8sYAIAk5ilAzjk99thj2rZtmyorK5Wfn3/FNfv375ck5eTkxDQgAKB38hSgsrIybdq0STt27FBqaqoaGxslSYFAQAMGDNDhw4e1adMmffvb39agQYN04MABLVu2TBMnTtSYMWMS8h8AAEhOnt4D8vl8nd6/fv16zZs3Tw0NDXr44Yd18OBBtbW1KS8vTzNnztRTTz31ld/PCYfDCgQCvAcEAEkqIe8BXalVeXl5qqqq8vItAQDXKK4FBwAwQYAAACYIEADABAECAJggQAAAEwQIAGCCAAEATBAgAIAJAgQAMEGAAAAmCBAAwAQBAgCY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\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def augRotate(sample, angleconstraint):\n",
        "  if angleconstraint==0:\n",
        "    return sample\n",
        "  if len(sample.shape)==2:\n",
        "    sample = np.expand_dims(sample, 0)  # make sure the sample is 3 dimensional\n",
        "  angle = rng.random(len(sample)) # generate random numbers for angles\n",
        "  angle = (angle-0.5)*angleconstraint # make the random angle constrained\n",
        "  nsample = sample.copy() # preallocate the augmented array to make it faster\n",
        "  for ii in range(len(sample)):\n",
        "    nsample[ii] = rotate(sample[ii], angle[ii])\n",
        "  return np.squeeze(nsample) # take care if the input had only one sample."
      ],
      "metadata": {
        "id": "Xu_U8JUmIYVh"
      },
      "execution_count": 7,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sample = train_X[20]\n",
        "angleconstraint = 50\n",
        "# show the original image\n",
        "plt.imshow(sample, cmap='copper')\n",
        "plt.show()\n",
        "plt.subplot(1,3,1)\n",
        "plt.imshow(augRotate(sample, angleconstraint), cmap='copper') # show an augmented image\n",
        "plt.subplot(1,3,2)\n",
        "plt.imshow(augRotate(sample, angleconstraint), cmap='copper') # show another augmented image from the same sample\n",
        "plt.subplot(1,3,3)\n",
        "plt.imshow(augRotate(sample, angleconstraint), cmap='copper') # one more image from the same sample"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 639
        },
        "id": "aWwneaCUIdmq",
        "outputId": "d7f568d8-80b7-483b-e9d6-da9f11e6ced2"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7ec0905df6d0>"
            ]
          },
          "metadata": {},
          "execution_count": 8
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 3 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# hyperparameters\n",
        "angleconstraint = 60\n",
        "naugmentations = 5\n",
        "\n",
        "# augment\n",
        "augdata = train_X # we include the original images also in the augmented dataset\n",
        "auglabel = train_y\n",
        "for ii in range(naugmentations):\n",
        "  augdata = np.concatenate((augdata, augRotate(train_X, angleconstraint))) # concatenate the augmented data to the set\n",
        "  auglabel = np.concatenate((auglabel, train_y))  # the labels don't change when we augment\n",
        "\n",
        "# check the test accuracy\n",
        "testpred = NN(augdata, auglabel, test_X)\n",
        "print('Accuracy after rotation augmentation is ', Accuracy(test_y, testpred))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "feBqRHmqIjrw",
        "outputId": "e6eb4f45-c867-435e-955e-7a055209883c"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy after rotation augmentation is  0.6616\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "angleconstraints = [0,10,20,30,40,50,60,70,80,90] # the values we want to test\n",
        "accuracies = np.zeros(len(angleconstraints), dtype=np.float) # we will save the values here\n",
        "\n",
        "for ii in range(len(angleconstraints)):\n",
        "  # create the augmented dataset\n",
        "  augdata = train_X # we include the original images also in the augmented dataset\n",
        "  auglabel = train_y\n",
        "  for jj in range(naugmentations):\n",
        "    augdata = np.concatenate((augdata, augRotate(train_X, angleconstraints[ii]))) # concatenate the augmented data to the set\n",
        "    auglabel = np.concatenate((auglabel, train_y))  # the labels don't change when we augment\n",
        "\n",
        "  # check the test accuracy\n",
        "  testpred = NN(augdata, auglabel, test_X)\n",
        "  accuracies[ii] = Accuracy(test_y, testpred)\n",
        "  print('Accuracy after rotation augmentation constrained by ',angleconstraints[ii], ' is ', accuracies[ii], flush=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6NeqmuJdIrIw",
        "outputId": "5e162247-f4ea-497f-d409-e4acfc150c3d"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-10-2f14d3721156>:2: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  accuracies = np.zeros(len(angleconstraints), dtype=np.float) # we will save the values here\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy after rotation augmentation constrained by  0  is  0.6472\n",
            "Accuracy after rotation augmentation constrained by  10  is  0.6727\n",
            "Accuracy after rotation augmentation constrained by  20  is  0.673\n",
            "Accuracy after rotation augmentation constrained by  30  is  0.6737\n",
            "Accuracy after rotation augmentation constrained by  40  is  0.6731\n",
            "Accuracy after rotation augmentation constrained by  50  is  0.6701\n",
            "Accuracy after rotation augmentation constrained by  60  is  0.6675\n",
            "Accuracy after rotation augmentation constrained by  70  is  0.661\n",
            "Accuracy after rotation augmentation constrained by  80  is  0.6462\n",
            "Accuracy after rotation augmentation constrained by  90  is  0.6469\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure()\n",
        "ax = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes\n",
        "# plot the variation of accuracy\n",
        "ax.plot(angleconstraints, accuracies)\n",
        "ax.set_xlabel('angle')\n",
        "ax.set_ylabel('accuracy')\n",
        "# plot the maximum accuracy\n",
        "maxind = np.argmax(accuracies)\n",
        "plt.scatter(angleconstraints[maxind], accuracies[maxind], c='red')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 485
        },
        "id": "NZ9lhznXIyR_",
        "outputId": "94546208-1ad9-42dd-93f2-842b45b41061"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7ec09051aa70>"
            ]
          },
          "metadata": {},
          "execution_count": 11
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def shear(sample, amount):\n",
        "  tform = AffineTransform(shear = amount) # create the shear transform\n",
        "  img = warp(sample, tform) # apply the shear\n",
        "  # this makes the digit off-center. Since all the images in the test set are centralized, we will do the same here\n",
        "  col = img.sum(0).nonzero()[0]\n",
        "  row = img.sum(1).nonzero()[0]\n",
        "  if len(col)>0 and len(row)>0:\n",
        "    xshift = int(sample.shape[0]/2 - (row[0]+row[-1])/2)\n",
        "    yshift = int(sample.shape[1]/2 - (col[0]+col[-1])/2)\n",
        "    img = np.roll(img, (xshift, yshift),(0,1))\n",
        "  return img"
      ],
      "metadata": {
        "id": "tnoFv-RrI2af"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "sample = train_X[2]\n",
        "plt.imshow(sample, cmap='Greens')\n",
        "plt.show()\n",
        "\n",
        "# apply shear\n",
        "plt.imshow(shear(sample, 0.3), cmap='Greens')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 860
        },
        "id": "_oSG1gD3I6XR",
        "outputId": "4dce68c6-ceb0-408b-9d2b-36fbddf21b4b"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.image.AxesImage at 0x7ec0903c4c10>"
            ]
          },
          "metadata": {},
          "execution_count": 13
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def augShear(sample, shearconstraint):\n",
        "  if shearconstraint==0:\n",
        "    return sample\n",
        "  if len(sample.shape)==2:\n",
        "    sample = np.expand_dims(sample, 0)  # make sure the sample is 3 dimensional\n",
        "  amt = rng.random(len(sample)) # generate random numbers for shear\n",
        "  amt = (amt-0.5)*shearconstraint # make the random shear constrained\n",
        "  nsample = sample.copy() # preallocate the augmented array to make it faster\n",
        "  for ii in range(len(sample)):\n",
        "    nsample[ii] = shear(sample[ii], amt[ii])\n",
        "  return np.squeeze(nsample) # take care if the input had only one sample."
      ],
      "metadata": {
        "id": "dwevrvKXI90_"
      },
      "execution_count": 14,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "shearconstraints = [0, 0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6,1.8,2.0] # the values we want to test\n",
        "accuracies = np.zeros(len(shearconstraints), dtype=np.float) # we will save the values here\n",
        "\n",
        "for ii in range(len(shearconstraints)):\n",
        "  # create the augmented dataset\n",
        "  augdata = train_X # we include the original images also in the augmented dataset\n",
        "  auglabel = train_y\n",
        "  for jj in range(naugmentations):\n",
        "    augdata = np.concatenate((augdata, augShear(train_X, shearconstraints[ii]))) # concatenate the augmented data to the set\n",
        "    auglabel = np.concatenate((auglabel, train_y))  # the labels don't change when we augment\n",
        "\n",
        "  # check the test accuracy\n",
        "  testpred = NN(augdata, auglabel, test_X)\n",
        "  accuracies[ii] = Accuracy(test_y, testpred)\n",
        "  print('Accuracy after shear augmentation constrained by ',shearconstraints[ii], ' is ', accuracies[ii], flush=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "24Edtnz4JEg3",
        "outputId": "3ffd7719-dba6-48f1-bec7-80aa5bc0d116"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-15-8a89fef4983d>:2: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  accuracies = np.zeros(len(shearconstraints), dtype=np.float) # we will save the values here\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy after shear augmentation constrained by  0  is  0.6472\n",
            "Accuracy after shear augmentation constrained by  0.2  is  0.6147\n",
            "Accuracy after shear augmentation constrained by  0.4  is  0.632\n",
            "Accuracy after shear augmentation constrained by  0.6  is  0.6351\n",
            "Accuracy after shear augmentation constrained by  0.8  is  0.6636\n",
            "Accuracy after shear augmentation constrained by  1.0  is  0.6652\n",
            "Accuracy after shear augmentation constrained by  1.2  is  0.6495\n",
            "Accuracy after shear augmentation constrained by  1.4  is  0.6181\n",
            "Accuracy after shear augmentation constrained by  1.6  is  0.6323\n",
            "Accuracy after shear augmentation constrained by  1.8  is  0.6432\n",
            "Accuracy after shear augmentation constrained by  2.0  is  0.6277\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure()\n",
        "ax = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes\n",
        "# plot the variation of accuracy\n",
        "ax.plot(shearconstraints, accuracies)\n",
        "ax.set_xlabel('angle')\n",
        "ax.set_ylabel('accuracy')\n",
        "# plot the maximum accuracy\n",
        "maxind = np.argmax(accuracies)\n",
        "plt.scatter(shearconstraints[maxind], accuracies[maxind], c='red')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 481
        },
        "id": "Oi4zg5u_JKH7",
        "outputId": "2b860b09-e7dc-4e0a-8d74-ff3868d34fef"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.collections.PathCollection at 0x7ec090684250>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "def augRotateShear(sample, angleconstraint, shearconstraint):\n",
        "  if len(sample.shape)==2:\n",
        "    sample = np.expand_dims(sample, 0)  # make sure the sample is 3 dimensional\n",
        "  amt = rng.random(len(sample)) # generate random numbers for shear\n",
        "  amt = (amt-0.5)*shearconstraint # make the random shear constrained\n",
        "  angle = rng.random(len(sample)) # generate random numbers for angles\n",
        "  angle = (angle-0.5)*angleconstraint # make the random angle constrained\n",
        "  nsample = sample.copy() # preallocate the augmented array to make it faster\n",
        "  for ii in range(len(sample)):\n",
        "    nsample[ii] = rotate(shear(sample[ii], amt[ii]), angle[ii]) # first apply shear, then rotate\n",
        "  return np.squeeze(nsample) # take care if the input had only one sample."
      ],
      "metadata": {
        "id": "QdDmOSjhJQxK"
      },
      "execution_count": 17,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "shearconstraints = [0, 0.2,0.4,0.6,0.8,1.0,1.2,1.4,1.6] # the values we want to test\n",
        "angleconstraints = [0,10,20,30,40,50,60] # the values we want to test\n",
        "hyp = cartesian((shearconstraints, angleconstraints)) # cartesian product of both\n",
        "\n",
        "accuracies = np.zeros(len(hyp), dtype=np.float) # we will save the values here\n",
        "\n",
        "for ii in range(len(hyp)):\n",
        "  # create the augmented dataset\n",
        "  augdata = train_X # we include the original images also in the augmented dataset\n",
        "  auglabel = train_y\n",
        "  for jj in range(naugmentations):\n",
        "    augdata = np.concatenate((augdata, augRotateShear(train_X, hyp[ii][0], hyp[ii][1]))) # concatenate the augmented data to the set\n",
        "    auglabel = np.concatenate((auglabel, train_y))  # the labels don't change when we augment\n",
        "\n",
        "  # check the test accuracy\n",
        "  testpred = NN(augdata, auglabel, test_X)\n",
        "  accuracies[ii] = Accuracy(test_y, testpred)\n",
        "  print('Accuracy after augmentation shear:',hyp[ii][0], 'angle:',hyp[ii][1], ' is ', accuracies[ii], flush=True)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6qj7M5B1JWRA",
        "outputId": "6f1c6d92-05bc-4d92-922e-caa3c8e3e9ee"
      },
      "execution_count": 18,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-18-09de780976d0>:5: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
            "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
            "  accuracies = np.zeros(len(hyp), dtype=np.float) # we will save the values here\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Accuracy after augmentation shear: 0.0 angle: 0.0  is  0.6332\n",
            "Accuracy after augmentation shear: 0.0 angle: 10.0  is  0.6151\n",
            "Accuracy after augmentation shear: 0.0 angle: 20.0  is  0.5997\n",
            "Accuracy after augmentation shear: 0.0 angle: 30.0  is  0.5915\n",
            "Accuracy after augmentation shear: 0.0 angle: 40.0  is  0.6198\n",
            "Accuracy after augmentation shear: 0.0 angle: 50.0  is  0.6031\n",
            "Accuracy after augmentation shear: 0.0 angle: 60.0  is  0.5916\n",
            "Accuracy after augmentation shear: 0.2 angle: 0.0  is  0.634\n",
            "Accuracy after augmentation shear: 0.2 angle: 10.0  is  0.5991\n",
            "Accuracy after augmentation shear: 0.2 angle: 20.0  is  0.6044\n",
            "Accuracy after augmentation shear: 0.2 angle: 30.0  is  0.6358\n",
            "Accuracy after augmentation shear: 0.2 angle: 40.0  is  0.5827\n",
            "Accuracy after augmentation shear: 0.2 angle: 50.0  is  0.579\n",
            "Accuracy after augmentation shear: 0.2 angle: 60.0  is  0.5877\n",
            "Accuracy after augmentation shear: 0.4 angle: 0.0  is  0.6344\n",
            "Accuracy after augmentation shear: 0.4 angle: 10.0  is  0.6151\n",
            "Accuracy after augmentation shear: 0.4 angle: 20.0  is  0.5988\n",
            "Accuracy after augmentation shear: 0.4 angle: 30.0  is  0.6107\n",
            "Accuracy after augmentation shear: 0.4 angle: 40.0  is  0.6177\n",
            "Accuracy after augmentation shear: 0.4 angle: 50.0  is  0.5855\n",
            "Accuracy after augmentation shear: 0.4 angle: 60.0  is  0.5893\n",
            "Accuracy after augmentation shear: 0.6 angle: 0.0  is  0.6339\n",
            "Accuracy after augmentation shear: 0.6 angle: 10.0  is  0.6191\n",
            "Accuracy after augmentation shear: 0.6 angle: 20.0  is  0.595\n",
            "Accuracy after augmentation shear: 0.6 angle: 30.0  is  0.5963\n",
            "Accuracy after augmentation shear: 0.6 angle: 40.0  is  0.6203\n",
            "Accuracy after augmentation shear: 0.6 angle: 50.0  is  0.5859\n",
            "Accuracy after augmentation shear: 0.6 angle: 60.0  is  0.6094\n",
            "Accuracy after augmentation shear: 0.8 angle: 0.0  is  0.6354\n",
            "Accuracy after augmentation shear: 0.8 angle: 10.0  is  0.6208\n",
            "Accuracy after augmentation shear: 0.8 angle: 20.0  is  0.5928\n",
            "Accuracy after augmentation shear: 0.8 angle: 30.0  is  0.5875\n",
            "Accuracy after augmentation shear: 0.8 angle: 40.0  is  0.6242\n",
            "Accuracy after augmentation shear: 0.8 angle: 50.0  is  0.5796\n",
            "Accuracy after augmentation shear: 0.8 angle: 60.0  is  0.5947\n",
            "Accuracy after augmentation shear: 1.0 angle: 0.0  is  0.6334\n",
            "Accuracy after augmentation shear: 1.0 angle: 10.0  is  0.6178\n",
            "Accuracy after augmentation shear: 1.0 angle: 20.0  is  0.6074\n",
            "Accuracy after augmentation shear: 1.0 angle: 30.0  is  0.5934\n",
            "Accuracy after augmentation shear: 1.0 angle: 40.0  is  0.6199\n",
            "Accuracy after augmentation shear: 1.0 angle: 50.0  is  0.5865\n",
            "Accuracy after augmentation shear: 1.0 angle: 60.0  is  0.5952\n",
            "Accuracy after augmentation shear: 1.2 angle: 0.0  is  0.6328\n",
            "Accuracy after augmentation shear: 1.2 angle: 10.0  is  0.5727\n",
            "Accuracy after augmentation shear: 1.2 angle: 20.0  is  0.617\n",
            "Accuracy after augmentation shear: 1.2 angle: 30.0  is  0.5852\n",
            "Accuracy after augmentation shear: 1.2 angle: 40.0  is  0.5813\n",
            "Accuracy after augmentation shear: 1.2 angle: 50.0  is  0.587\n",
            "Accuracy after augmentation shear: 1.2 angle: 60.0  is  0.6195\n",
            "Accuracy after augmentation shear: 1.4 angle: 0.0  is  0.6344\n",
            "Accuracy after augmentation shear: 1.4 angle: 10.0  is  0.6069\n",
            "Accuracy after augmentation shear: 1.4 angle: 20.0  is  0.601\n",
            "Accuracy after augmentation shear: 1.4 angle: 30.0  is  0.5848\n",
            "Accuracy after augmentation shear: 1.4 angle: 40.0  is  0.6005\n",
            "Accuracy after augmentation shear: 1.4 angle: 50.0  is  0.6045\n",
            "Accuracy after augmentation shear: 1.4 angle: 60.0  is  0.6129\n",
            "Accuracy after augmentation shear: 1.6 angle: 0.0  is  0.6369\n",
            "Accuracy after augmentation shear: 1.6 angle: 10.0  is  0.6097\n",
            "Accuracy after augmentation shear: 1.6 angle: 20.0  is  0.6078\n",
            "Accuracy after augmentation shear: 1.6 angle: 30.0  is  0.6048\n",
            "Accuracy after augmentation shear: 1.6 angle: 40.0  is  0.585\n",
            "Accuracy after augmentation shear: 1.6 angle: 50.0  is  0.5915\n",
            "Accuracy after augmentation shear: 1.6 angle: 60.0  is  0.5941\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "fig = plt.figure()\n",
        "ax = fig.add_axes([0.1, 0.1, 0.8, 0.8]) # main axes\n",
        "im = ax.imshow(accuracies.reshape((len(shearconstraints), len(angleconstraints))), cmap='inferno')\n",
        "ax.set_xlabel('angle')\n",
        "ax.set_ylabel('shear')\n",
        "ax.set_xticks(np.arange(len(angleconstraints)));\n",
        "ax.set_xticklabels(angleconstraints);\n",
        "ax.set_yticks(np.arange(len(shearconstraints)));\n",
        "ax.set_yticklabels(shearconstraints);\n",
        "plt.colorbar(im)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 481
        },
        "id": "oob1DF0YJb6w",
        "outputId": "5b0c6d7c-c05b-468b-883f-4a65ced135c1"
      },
      "execution_count": 19,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<matplotlib.colorbar.Colorbar at 0x7ec09037bdc0>"
            ]
          },
          "metadata": {},
          "execution_count": 19
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 640x480 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "1.What is the best value for angle constraint and shear constraint you got? How much did the accuracy improve as compared to not using augmentations?"
      ],
      "metadata": {
        "id": "h9GEktC_JrXH"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "ANS:-Rotation Augmentation:The best accuracy was achieved with a 30-degree angle constraint, resulting in an accuracy of 0.6737.\n",
        "Shear Augmentation:\n",
        "\n",
        "The code provided demonstrates rotation augmentation but does not include shear augmentation. If you intend to apply shear augmentation and want to determine the best shear constraint, you would need to modify the code accordingly and evaluate its impact on accuracy.\n",
        "Accuracy Improvement:\n",
        "\n",
        "The baseline accuracy without any augmentations was 0.6472.\n",
        "With the best rotation augmentation (30-degree angle constraint), the accuracy improved to 0.6737.\n",
        "The accuracy improvement achieved with the best rotation augmentation was approximately 0.0265 (or 2.65 percentage points) compared to not using augmentations.\n",
        "\n",
        "\n",
        "\n",
        "\n",
        "\n"
      ],
      "metadata": {
        "id": "03RXfmv6K4Nj"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "2.Can you increase the accuracy by increasing the number of augmentations from each sample?"
      ],
      "metadata": {
        "id": "drvgHWDiLk60"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Define a higher number of augmentations\n",
        "naugmentations = 10  # For example, increase it from 5 to 10\n",
        "\n",
        "# Augment the training dataset with more copies\n",
        "for ii in range(naugmentations):\n",
        "    augdata = np.concatenate((augdata, augRotate(train_X, angleconstraint)))\n",
        "    auglabel = np.concatenate((auglabel, train_y))"
      ],
      "metadata": {
        "id": "ST1m-7SiLiTr"
      },
      "execution_count": 21,
      "outputs": []
    }
  ]
}